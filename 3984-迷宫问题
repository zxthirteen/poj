#include <iostream>
#include <fstream>
#include <vector>
#include <cstdlib>
#include <stack>
#include <string>
#include <climits>
#include <ctime>
#include <map>
#include <hash_map>
#include <queue>

using namespace std;

const int n = 5;

int x[n][n];
int v[n][n];

struct point {
    int x;
	int y;
	point() {}
	point(int xx, int yy): x(xx), y(yy) {}
};

point last[n][n];

int main() {
	ifstream ifs;
	ifs.open("D:\\mycode\\i.txt");
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			ifs >> x[i][j];
			v[i][j] = false;
		}
	}

	queue<point> q;
	q.push(point(0, 0));
	last[0][0] = point(0, 0);
	v[0][0] = true;
	while (!q.empty()) {
		point p = q.front();
		q.pop();
		if (p.x == n-1 && p.y == n-1) break;
		
		if (p.x-1 >= 0 && !x[p.x-1][p.y] && !v[p.x-1][p.y]) {
			q.push(point(p.x-1, p.y));
			v[p.x-1][p.y] = true;
			last[p.x-1][p.y] = point(p.x, p.y);
		}
		if (p.x+1 <= n-1 && !x[p.x+1][p.y] && !v[p.x+1][p.y]) {
			q.push(point(p.x+1, p.y));
			v[p.x+1][p.y] = true;
			last[p.x+1][p.y] = point(p.x, p.y);
		}
		if (p.y-1 >= 0 && !x[p.x][p.y-1] && !v[p.x][p.y-1]) {
			q.push(point(p.x, p.y-1));
			v[p.x][p.y-1] = true;
			last[p.x][p.y-1] = point(p.x, p.y);
		}
		if (p.y+1 <= n-1 && !x[p.x][p.y+1] && !v[p.x][p.y+1]) {
			q.push(point(p.x, p.y+1));
			v[p.x][p.y+1] = true;
			last[p.x][p.y+1] = point(p.x, p.y);
		}
	}

	stack<point> res;
	int fx = n-1, fy = n-1;
	while (!(fx == 0 && fy == 0)) {
		res.push(point(fx, fy));
		point tmp = last[fx][fy];
		fx = tmp.x;
		fy = tmp.y;
	}
	res.push(point(0, 0));

	while (!res.empty()) {
		cout << '(' << res.top().x << ", " << res.top().y << ')' << endl;
		res.pop();
	}
	system("PAUSE");
}
